<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Solar System Animation Report</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            color: #ffffff;
            background: linear-gradient(135deg, #0c0c2e 0%, #1a1a3e 25%, #2d1b69 50%, #4a2c85 75%, #6b3aa0 100%);
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }

        /* Animated starfield background */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                radial-gradient(2px 2px at 20px 30px, #eee, transparent),
                radial-gradient(2px 2px at 40px 70px, #fff, transparent),
                radial-gradient(1px 1px at 90px 40px, #fff, transparent),
                radial-gradient(1px 1px at 130px 80px, #fff, transparent),
                radial-gradient(2px 2px at 160px 30px, #ddd, transparent);
            background-repeat: repeat;
            background-size: 200px 100px;
            animation: twinkle 10s infinite;
            z-index: -1;
            opacity: 0.8;
        }

        @keyframes twinkle {
            0%, 100% { opacity: 0.8; }
            50% { opacity: 0.3; }
        }

        /* Floating planets decoration */
        .planet-decoration {
            position: fixed;
            border-radius: 50%;
            opacity: 0.1;
            animation: float 20s infinite ease-in-out;
            z-index: -1;
        }

        .planet-1 {
            width: 60px;
            height: 60px;
            background: radial-gradient(circle, #ffa500, #ff6347);
            top: 10%;
            right: 10%;
            animation-delay: 0s;
        }

        .planet-2 {
            width: 40px;
            height: 40px;
            background: radial-gradient(circle, #4169e1, #1e90ff);
            bottom: 20%;
            left: 5%;
            animation-delay: -7s;
        }

        .planet-3 {
            width: 80px;
            height: 80px;
            background: radial-gradient(circle, #32cd32, #228b22);
            top: 60%;
            right: 5%;
            animation-delay: -14s;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            33% { transform: translateY(-20px) rotate(120deg); }
            66% { transform: translateY(20px) rotate(240deg); }
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            position: relative;
            z-index: 1;
        }

        .header {
            text-align: center;
            margin-bottom: 50px;
            padding: 40px 0;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .header h1 {
            font-size: 3.5em;
            margin-bottom: 15px;
            background: linear-gradient(45deg, #ffd700, #ffa500, #ff6347);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 0 0 30px rgba(255, 215, 0, 0.5);
            animation: glow 2s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from { text-shadow: 0 0 20px rgba(255, 215, 0, 0.5); }
            to { text-shadow: 0 0 40px rgba(255, 215, 0, 0.8), 0 0 60px rgba(255, 165, 0, 0.6); }
        }

        .header p {
            font-size: 1.3em;
            color: #b8c5d6;
            margin-top: 10px;
        }

        .section {
            background: rgba(0, 0, 0, 0.4);
            margin: 30px 0;
            padding: 30px;
            border-radius: 15px;
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .section:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);
        }

        .section h2 {
            font-size: 2.5em;
            margin-bottom: 20px;
            color: #ffd700;
            text-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .section h3 {
            font-size: 1.8em;
            margin: 25px 0 15px 0;
            color: #87ceeb;
            text-shadow: 0 0 5px rgba(135, 206, 235, 0.5);
        }

        .section h4 {
            font-size: 1.4em;
            margin: 20px 0 10px 0;
            color: #98fb98;
        }

        .section p {
            margin-bottom: 15px;
            color: #e6e6fa;
            text-align: justify;
        }

        .step-list {
            margin: 20px 0;
            padding-left: 0;
        }

        .step-item {
            background: rgba(255, 255, 255, 0.05);
            margin: 15px 0;
            padding: 20px;
            border-radius: 10px;
            border-left: 4px solid #ffd700;
            transition: all 0.3s ease;
        }

        .step-item:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateX(10px);
        }

        .step-number {
            display: inline-block;
            background: linear-gradient(45deg, #ffd700, #ffa500);
            color: #000;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            text-align: center;
            line-height: 30px;
            font-weight: bold;
            margin-right: 15px;
            font-size: 1.1em;
        }

        .code-block {
            background: rgba(0, 0, 0, 0.6);
            border: 1px solid #444;
            border-radius: 8px;
            padding: 20px;
            margin: 15px 0;
            font-family: 'Courier New', monospace;
            color: #00ff00;
            overflow-x: auto;
            position: relative;
        }

        .code-block::before {
            content: '</>';
            position: absolute;
            top: 10px;
            right: 15px;
            color: #666;
            font-size: 0.9em;
        }

        .highlight {
            background: linear-gradient(45deg, rgba(255, 215, 0, 0.2), rgba(255, 165, 0, 0.2));
            padding: 2px 8px;
            border-radius: 4px;
            font-weight: bold;
        }

        .results-section {
            background: linear-gradient(135deg, rgba(255, 215, 0, 0.1), rgba(255, 165, 0, 0.1));
            border: 2px solid #ffd700;
        }

        .results-section h2 {
            color: #ffd700;
            font-size: 2.8em;
        }

        .link-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 25px;
        }

        .project-link {
            display: inline-block;
            background: linear-gradient(45deg, #4169e1, #1e90ff);
            color: white;
            padding: 15px 25px;
            text-decoration: none;
            border-radius: 25px;
            transition: all 0.3s ease;
            font-weight: bold;
            box-shadow: 0 4px 15px rgba(65, 105, 225, 0.3);
        }

        .project-link:hover {
            background: linear-gradient(45deg, #1e90ff, #4169e1);
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(65, 105, 225, 0.5);
        }

        .emoji {
            font-size: 1.2em;
            margin-right: 10px;
        }

        .formula {
            background: rgba(255, 255, 255, 0.1);
            padding: 10px;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            text-align: center;
            margin: 10px 0;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 2.5em;
            }
            
            .section {
                padding: 20px;
            }
            
            .section h2 {
                font-size: 2em;
            }
            
            .link-container {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <!-- Floating planet decorations -->
    <div class="planet-decoration planet-1"></div>
    <div class="planet-decoration planet-2"></div>
    <div class="planet-decoration planet-3"></div>

    <div class="container">
        <div class="header">
            <h1>🌟 SOLAR SYSTEM ANIMATION 🌟</h1>
            <p>A Comprehensive Step-by-Step Development Guide</p>
        </div>

        <div class="section">
            <h2><span class="emoji">🎯</span>Setting Up the HTML and Canvas</h2>
            
            <h3>1. Create the HTML Structure</h3>
            <div class="step-item">
                <span class="step-number">1</span>
                <strong>Start with a basic HTML document:</strong>
                <p>Define the document type and language, set up the &lt;head&gt; section with a title and any necessary metadata, and include the &lt;body&gt; section where the canvas will reside.</p>
            </div>

            <h3>2. Add the &lt;canvas&gt; Element</h3>
            <div class="step-item">
                <span class="step-number">2</span>
                <strong>Insert a canvas tag within the body:</strong>
                <p>Assign it a unique id to reference it in JavaScript and specify the width and height attributes to define the drawing area.</p>
            </div>

            <h3>3. Link External Resources</h3>
            <div class="step-item">
                <span class="step-number">3</span>
                <strong>Include the Anime.js library:</strong>
                <p>Add a &lt;script&gt; tag that links to the Anime.js library, either via a CDN or a local file. Link your custom JavaScript file with another &lt;script&gt; tag for the animation logic.</p>
            </div>

            <h3>4. Style the Canvas (Optional)</h3>
            <div class="step-item">
                <span class="step-number">4</span>
                <strong>Apply CSS to the canvas:</strong>
                <p>Use CSS to set the canvas's border, background color, or center it on the page.</p>
            </div>
        </div>

        <div class="section">
            <h2><span class="emoji">☀️</span>Drawing the Sun</h2>
            
            <h3>1. Positioning the Sun</h3>
            <div class="step-item">
                <span class="step-number">1</span>
                <strong>Center of the Canvas:</strong>
                <p>Place the sun at the center of your canvas. If your canvas has a width of 800 pixels and a height of 600 pixels, the center coordinates would be <span class="highlight">(400, 300)</span>.</p>
            </div>

            <h3>2. Rendering the Sun</h3>
            <div class="step-item">
                <span class="step-number">2</span>
                <strong>Drawing a Circle:</strong>
                <p>Use the canvas API to draw a circle representing the sun. Set the fill color to a bright yellow or orange to depict the sun's appearance.</p>
            </div>

            <h3>3. Adding a Glowing Effect</h3>
            <p>To make the sun more realistic and visually striking, you can add a glowing effect using these methods:</p>
            
            <h4>a. Using Shadow Properties</h4>
            <div class="step-item">
                <span class="step-number">3a</span>
                <strong>Shadow Blur and Color:</strong>
                <p>Apply shadow properties to the sun's circle to create a glow. Set shadowBlur to a suitable value (e.g., 20) and shadowColor to a color like 'orange' or 'yellow'.</p>
            </div>

            <h4>b. Using Radial Gradients</h4>
            <div class="step-item">
                <span class="step-number">3b</span>
                <strong>Creating a Gradient:</strong>
                <p>Implement a radial gradient that transitions from a bright center to a transparent edge. This technique gives the sun a more natural and radiant glow.</p>
            </div>
        </div>

        <div class="section">
            <h2><span class="emoji">🪐</span>Defining Planetary Orbits</h2>
            
            <h3>1. Determine Orbit Radii</h3>
            <div class="step-item">
                <span class="step-number">1</span>
                <strong>Assign Orbit Distances:</strong>
                <p>For each planet, decide on a unique orbit radius based on its relative distance from the sun. For instance, Mercury might have a radius of 50 pixels, Venus 80 pixels, Earth 110 pixels, and so on.</p>
            </div>

            <h3>2. Draw Orbit Paths</h3>
            <div class="step-item">
                <span class="step-number">2</span>
                <strong>Use Circular Paths:</strong>
                <p>Utilize the canvas API's <span class="highlight">arc()</span> method to draw circular paths representing each planet's orbit. Center the orbits around the sun's position.</p>
            </div>

            <h3>3. Organize Orbit Data</h3>
            <div class="step-item">
                <span class="step-number">3</span>
                <strong>Create Data Structures:</strong>
                <p>Organize the orbit information for each planet into a structured format, such as an array of objects. Each object can contain properties like the planet's name, orbit radius, and orbital speed.</p>
            </div>
        </div>

        <div class="section">
            <h2><span class="emoji">🌍</span>Creating Planet Objects</h2>
            
            <h3>1. Define Planet Properties</h3>
            <p>For each planet, you'll need to specify several key attributes:</p>
            <div class="step-list">
                <div class="step-item"><strong>Name:</strong> The planet's name (e.g., "Mercury", "Venus")</div>
                <div class="step-item"><strong>Orbit Radius:</strong> The distance from the sun, determining the size of the orbit</div>
                <div class="step-item"><strong>Size:</strong> The visual size of the planet on the canvas</div>
                <div class="step-item"><strong>Color:</strong> The color used to represent the planet</div>
                <div class="step-item"><strong>Orbital Speed:</strong> The speed at which the planet orbits the sun</div>
                <div class="step-item"><strong>Current Angle:</strong> The current position of the planet along its orbit, typically initialized to 0</div>
            </div>

            <h3>2. Calculate Planet Positions</h3>
            <p>To determine the position of each planet on the canvas, use trigonometric functions:</p>
            <div class="formula">
                <strong>X-coordinate:</strong> x = centerX + orbitRadius × Math.cos(angle)<br>
                <strong>Y-coordinate:</strong> y = centerY + orbitRadius × Math.sin(angle)
            </div>

            <h3>3. Update Planet Positions Over Time</h3>
            <div class="step-item">
                <span class="step-number">3</span>
                <strong>Animation:</strong>
                <p>To animate the planets orbiting the sun, increment each planet's angle by its orbital speed on each animation frame. This will cause the planets to move along their respective orbits.</p>
            </div>
        </div>

        <div class="section">
            <h2><span class="emoji">🚀</span>Animating Planetary Motion</h2>
            
            <h3>1. Establish an Animation Loop</h3>
            <div class="step-item">
                <span class="step-number">1</span>
                <strong>Purpose:</strong>
                <p>To continuously update and render the positions of the planets, creating the illusion of motion. Utilize the <span class="highlight">requestAnimationFrame()</span> function to create a loop that updates the canvas at the optimal frame rate.</p>
            </div>

            <h3>2. Clear the Canvas</h3>
            <div class="step-item">
                <span class="step-number">2</span>
                <strong>Implementation:</strong>
                <p>Use the <span class="highlight">clearRect()</span> method of the canvas context to clear the entire canvas area, preventing visual artifacts.</p>
                <div class="code-block">context.clearRect(0, 0, canvas.width, canvas.height)</div>
            </div>

            <h3>3. Update Planet Positions</h3>
            <div class="step-item">
                <span class="step-number">3</span>
                <strong>Method:</strong>
                <p>For each planet, increment its current angle by its orbital speed to simulate motion. Then, calculate the new x and y coordinates using trigonometric functions.</p>
            </div>

            <h3>4. Render the Sun and Planets</h3>
            <div class="step-item">
                <span class="step-number">4</span>
                <strong>Drawing Process:</strong>
                <p>Draw a circle at the center of the canvas to represent the sun. For each planet, draw a circle at its calculated position with its specified size and color. Use the canvas context's drawing methods (beginPath(), arc(), fill(), etc.).</p>
            </div>

            <h3>5. Repeat the Animation Loop</h3>
            <div class="step-item">
                <span class="step-number">5</span>
                <strong>Continuous Animation:</strong>
                <p>At the end of your animate() function, call <span class="highlight">requestAnimationFrame(animate)</span> to schedule the next frame and ensure continuous smooth motion.</p>
            </div>
        </div>

        <div class="section results-section">
            <h2><span class="emoji">🎉</span>RESULTS</h2>
            <p>Here are the final project demonstrations and resources:</p>
            
            <div class="link-container">
                <a href="https://codepen.io/Xadicha-Rahimova/pen/wBaEvNg" class="project-link" target="_blank">
                    🖥️ Main Demo - CodePen
                </a>
                <a href="https://khadicha05.github.io/animated-solar-system/" class="project-link" target="_blank">
                    🌐 Live GitHub Demo
                </a>
                <a href="https://claude.ai/public/artifacts/4ecf5692-fa8c-4254-86ef-eaa8eb7e83dd" class="project-link" target="_blank">
                    🎨 Solar System Logo
                </a>
            </div>

            <p style="margin-top: 30px; text-align: center; font-size: 1.2em;">
                <strong>🌟 Experience the beauty of our solar system through interactive animation! 🌟</strong>
            </p>
        </div>
    </div>

    <script>
        // Add some interactive sparkle effects
        document.addEventListener('mousemove', function(e) {
            createSparkle(e.clientX, e.clientY);
        });

        function createSparkle(x, y) {
            const sparkle = document.createElement('div');
            sparkle.style.position = 'fixed';
            sparkle.style.left = x + 'px';
            sparkle.style.top = y + 'px';
            sparkle.style.width = '4px';
            sparkle.style.height = '4px';
            sparkle.style.background = '#ffd700';
            sparkle.style.borderRadius = '50%';
            sparkle.style.pointerEvents = 'none';
            sparkle.style.zIndex = '1000';
            sparkle.style.animation = 'sparkleAnimation 1s ease-out forwards';
            
            document.body.appendChild(sparkle);
            
            setTimeout(() => {
                document.body.removeChild(sparkle);
            }, 1000);
        }

        // Add sparkle animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes sparkleAnimation {
                0% {
                    transform: scale(0) rotate(0deg);
                    opacity: 1;
                }
                50% {
                    transform: scale(1) rotate(180deg);
                    opacity: 0.8;
                }
                100% {
                    transform: scale(0) rotate(360deg);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>
